>>> data = torch.randn(1,3)
>>> weights = torch.randn(3,3, requires_grad=True)
>>> bias = torch.ones(3, 1, requires_grad=True)
# Forwardpropagation
>>> y = torch.mm(data, weights) + bias
>>> z = y.mean() # Skalar
>>> z.backward()  # Backpropagation
>>> bias.grad
tensor([[0.6667],
        [0.6667],
        [0.6667]])
>>> weights.grad
tensor([[0.2235, 0.2235, 0.2235],
        [0.0440, 0.0440, 0.0440],
        [0.4194, 0.4194, 0.4194]])